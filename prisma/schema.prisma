// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @db.VarChar(255)
  username             String                @unique @db.VarChar(255)
  email                String                @unique @db.VarChar(255)
  name                 String                @db.VarChar(255)
  bio                  String?               @db.Text
  image                String?               @db.Text
  role                 Roles                 @default(USER)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  emailLogin           EmailLogin?
  socialLogins         SocialLogin[]
  loginAttempts        LoginAttempt[]
  userPreferences      UserPreference[]
  userReputation       UserReputation?
  vedvyasCoin          VedvyasCoin?
  playlists            Playlist[]
  userVideoSuggestions UserVideoSuggestion[]
  bookmarkedPlaylists  BookmarkedPlaylist[]
  userSubmissions      UserSubmission[]
  participatedContests ContestUsersMapping[]
  Contest              Contest[]
  ChallengeSet         ChallengeSet[]
  Challenge            Challenge[]
  TestCase             TestCase[]
  ChallengeOption      ChallengeOption[]
}

enum Roles {
  USER
  MANAGER
  ADMIN
}

model EmailLogin {
  userId             String  @unique @db.VarChar(255)
  user               User    @relation(fields: [userId], references: [id])
  email              String  @unique @db.VarChar(255)
  password           String  @db.VarChar(255)
  verificationToken  String? @db.VarChar(255)
  resetPasswordToken String? @db.VarChar(255)
}

model SocialLogin {
  userId         String @unique @db.VarChar(255)
  provider       String @db.VarChar(255)
  providerUserId String @db.VarChar(255)
  user           User   @relation(fields: [userId], references: [id])
}

model LoginAttempt {
  id         String   @id @db.VarChar(255)
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.VarChar(255)
  ipAddress  String   @db.VarChar(255)
  loginTime  DateTime @default(now())
  successful Boolean
}

model UserReputation {
  id              String    @id @db.VarChar(255)
  reputationScore Int       @default(10)
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique @db.VarChar(255)
  updatedAt       DateTime? @default(now()) @updatedAt
}

model VedvyasCoin {
  id          String    @id @db.VarChar(255)
  coinBalance Int       @default(0)
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique @db.VarChar(255)
  updatedAt   DateTime? @default(now()) @updatedAt
}

model TagCategory {
  id   String @id @db.VarChar(255)
  name String @unique @db.VarChar(255)
  tags Tag[]
}

model Tag {
  id              String           @id @db.VarChar(255)
  name            String           @db.VarChar(255)
  tagCategory     TagCategory      @relation(fields: [tagCategoryId], references: [id])
  tagCategoryId   String           @db.VarChar(255)
  userPreferences UserPreference[]
  topicTags       Topictag[]
  articleTags     ArticleTag[]
}

model UserPreference {
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.VarChar(255)
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String @db.VarChar(255)

  @@id(name: "userPreferenceId", [userId, tagId])
}

model Topic {
  id                   String                @id @db.VarChar(255)
  title                String                @unique @db.VarChar(255)
  uid                  String                @unique @db.VarChar(255)
  description          String?               @db.Text
  image                String?               @db.Text
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  topicTags            Topictag[]
  playlists            Playlist[]
  userVideoSuggestions UserVideoSuggestion[]
  contests             Contest[]
}

model Topictag {
  topic   Topic  @relation(fields: [topicId], references: [id])
  topicId String @db.VarChar(255)
  tag     Tag    @relation(fields: [tagId], references: [id])
  tagId   String @db.VarChar(255)

  @@id(name: "topicTagId", [topicId, tagId])
}

model Playlist {
  id          String               @id @db.VarChar(255)
  title       String               @db.VarChar(255)
  uid         String               @unique @db.VarChar(255)
  description String?              @db.Text
  image       String?              @db.Text
  topic       Topic                @relation(fields: [topicId], references: [id])
  topicId     String               @db.VarChar(255)
  owner       String               @db.VarChar(255)
  addedBy     User                 @relation(fields: [userId], references: [id])
  userId      String               @db.VarChar(255)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime?            @updatedAt
  videos      Video[]
  bookmarks   BookmarkedPlaylist[]
}

model Video {
  id          String    @db.VarChar(255)
  title       String    @db.VarChar(255)
  url         String?   @db.Text
  videosrc    String?   @db.VarChar(255)
  publishedAt DateTime?
  description String?   @db.Text
  episodeNo   Int
  playlist    Playlist  @relation(fields: [playlistId], references: [id])
  playlistId  String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  @@id(name: "videoId", [playlistId, id])
}

model UserVideoSuggestion {
  id        String   @id @db.VarChar(255)
  url       String   @unique @db.VarChar(255)
  urlType   String   @db.VarChar(255)
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String   @db.VarChar(255)
  addedBy   User     @relation(fields: [userId], references: [id])
  userId    String   @db.VarChar(255)
  status    STATUS   @default(PENDING)
  createdAt DateTime @default(now())
}

enum STATUS {
  APPROVED
  REJECTED
  PENDING
}

model BookmarkedPlaylist {
  id         String   @id @db.VarChar(255)
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.VarChar(255)
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String   @db.VarChar(255)
  createdAt  DateTime @default(now())

  @@unique(name: "bookmarkId", [userId, playlistId])
}

model ArticleSource {
  id        String             @id @db.VarChar(255)
  url       String             @unique @db.VarChar(500)
  name      String             @db.VarChar(255)
  image     String?            @db.Text
  status    ARTICESOURCESTATUS @default(ACTIVE)
  createdAt DateTime           @default(now())
  articles  Article[]
}

enum ARTICESOURCESTATUS {
  ACTIVE
  INACTIVE
}

model Article {
  id              String        @id @db.VarChar(255)
  title           String        @db.VarChar(255)
  url             String        @unique @db.VarChar(500)
  slug            String        @unique @db.VarChar(600)
  content         String        @db.Text
  description     String?       @db.Text
  image           String?       @db.Text
  pubDate         DateTime
  articleSource   ArticleSource @relation(fields: [articleSourceId], references: [id])
  articleSourceId String        @db.VarChar(255)
  createdAt       DateTime      @default(now())
  articleTags     ArticleTag[]
}

model ArticleTag {
  article  Article @relation(fields: [articeId], references: [id])
  articeId String  @db.VarChar(255)
  tag      Tag     @relation(fields: [tagId], references: [id])
  tagId    String  @db.VarChar(255)

  @@id(name: "articleTagId", [articeId, tagId])
}

model Contest {
  id              String                @id @db.VarChar(255)
  title           String                @db.VarChar(500)
  startDate       DateTime
  endDate         DateTime
  status          CONTESTSTATUS         @default(NOTSTARTED)
  topic           Topic                 @relation(fields: [topicId], references: [id])
  topicId         String                @db.VarChar(255)
  createdBy       User                  @relation(fields: [userId], references: [id])
  userId          String                @db.VarChar(255)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime?             @updatedAt
  contestDetail   ContestDetail?
  challengeSet    ChallengeSet?
  userSubmissions UserSubmission[]
  registeredUsers ContestUsersMapping[]
}

enum CONTESTSTATUS {
  NOTSTARTED
  STARTED
  COMPLETED
  DISCARDED
}

model ContestDetail {
  contestId     String  @id @db.VarChar(255)
  contest       Contest @relation(fields: [contestId], references: [id])
  description   String  @db.Text
  importantNote String  @db.Text
  sponsoredNote String  @db.Text
  announcement  String  @db.Text
}

model ChallengeSet {
  id                             String                          @id @db.VarChar(255)
  title                          String                          @db.VarChar(500)
  description                    String                          @db.Text
  contestId                      String?                         @unique @db.VarChar(255)
  contest                        Contest?                        @relation(fields: [contestId], references: [id])
  createdBy                      User                            @relation(fields: [userId], references: [id])
  userId                         String                          @db.VarChar(255)
  createdAt                      DateTime                        @default(now())
  updatedAt                      DateTime?                       @updatedAt
  challengeSetsChallengeMappings ChallengeSetsChallengeMapping[]
}

model Challenge {
  id                             String                          @id @db.VarChar(255)
  title                          String                          @db.VarChar(500)
  level                          CHALLENGEDIFFICULTYLEVEL        @default(EASY)
  type                           CHALLENGETYPE
  description                    String                          @db.Text
  createdBy                      User                            @relation(fields: [userId], references: [id])
  userId                         String                          @db.VarChar(255)
  createdAt                      DateTime                        @default(now())
  updatedAt                      DateTime?                       @updatedAt
  challengeSetsChallengeMappings ChallengeSetsChallengeMapping[]
  testCases                      TestCase[]
  challengeOption                ChallengeOption?
  userSubmissions                UserSubmission[]
}

enum CHALLENGEDIFFICULTYLEVEL {
  EASY
  MEDIUM
  HARD
}

enum CHALLENGETYPE {
  CODING
  QNA
  SUBMISSION
}

model ChallengeSetsChallengeMapping {
  challenge      Challenge    @relation(fields: [challengeId], references: [id])
  challengeId    String       @db.VarChar(255)
  challengeSet   ChallengeSet @relation(fields: [challengeSetId], references: [id])
  challengeSetId String       @db.VarChar(255)
  createdAt      DateTime     @default(now())

  @@id([challengeId, challengeSetId])
}

model TestCase {
  id          String    @id @db.VarChar(255)
  input       String    @db.Text
  output      String    @db.Text
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String    @db.VarChar(255)
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
}

model ChallengeOption {
  id          String    @id @db.VarChar(255)
  options     String    @db.Text
  answer      String    @db.Text
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String    @unique @db.VarChar(255)
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
}

model ContestUsersMapping {
  contest   Contest  @relation(fields: [contestId], references: [id])
  contestId String   @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.VarChar(255)
  createdAt DateTime @default(now())

  @@id([contestId, userId])
}

model UserSubmission {
  id          String    @id @db.VarChar(255)
  url         String?   @db.Text
  submission  String?   @db.Text
  contest     Contest   @relation(fields: [contestId], references: [id])
  contestId   String    @db.VarChar(255)
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String    @db.VarChar(255)
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.VarChar(255)
  createdAt   DateTime  @default(now())
}
