// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id
  username             String                @unique
  email                String                @unique
  name                 String
  bio                  String?               @db.Text
  image                String?               @db.Text
  role                 Roles                 @default(USER)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  emailLogin           EmailLogin?
  socialLogins         SocialLogin[]
  loginAttempts        LoginAttempt[]
  userPreferences      UserPreference[]
  userReputation       UserReputation?
  vedvyasCoin          VedvyasCoin?
  playlists            Playlist[]
  userVideoSuggestions UserVideoSuggestion[]
  bookmarkedPlaylists  BookmarkedPlaylist[]
}

enum Roles {
  USER
  MANAGER
  ADMIN
}

model EmailLogin {
  userId             String  @unique
  user               User    @relation(fields: [userId], references: [id])
  email              String  @unique
  password           String
  verificationToken  String?
  resetPasswordToken String?
}

model SocialLogin {
  userId         String @unique
  provider       String
  providerUserId String
  user           User   @relation(fields: [userId], references: [id])
}

model LoginAttempt {
  id         String   @id
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  ipAddress  String
  loginTime  DateTime @default(now())
  successful Boolean
}

model UserReputation {
  id              String    @id
  reputationScore Int       @default(10)
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique
  updatedAt       DateTime? @default(now()) @updatedAt
}

model VedvyasCoin {
  id          String    @id
  coinBalance Int       @default(0)
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  updatedAt   DateTime? @default(now()) @updatedAt
}

model TagCategory {
  id   String @id
  name String @unique
  tags Tag[]
}

model Tag {
  id              String           @id
  name            String
  tagCategory     TagCategory      @relation(fields: [tagCategoryId], references: [id])
  tagCategoryId   String
  userPreferences UserPreference[]
  topicTags       Topictag[]
}

model UserPreference {
  id     String @id
  user   User   @relation(fields: [userId], references: [id])
  userId String
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String
}

model Topic {
  id                  String                @id
  title               String                @unique
  uid                 String                @unique
  description         String?               @db.Text
  image               String?               @db.Text
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  topicTags           Topictag[]
  playlists           Playlist[]
  UserVideoSuggestion UserVideoSuggestion[]
}

model Topictag {
  id      String @id
  topic   Topic  @relation(fields: [topicId], references: [id])
  topicId String
  tag     Tag    @relation(fields: [tagId], references: [id])
  tagId   String
}

model Playlist {
  id          String               @id
  title       String
  uid         String               @unique
  description String?              @db.Text
  image       String?              @db.Text
  topic       Topic                @relation(fields: [topicId], references: [id])
  topicId     String
  owner       String
  addedBy     User                 @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime?            @updatedAt
  videos      Video[]
  bookmarks   BookmarkedPlaylist[]
}

model Video {
  id          String
  title       String
  url         String?   @db.Text
  videosrc    String?
  publishedAt BigInt?
  description String?   @db.Text
  episodeNo   Int
  playlist    Playlist  @relation(fields: [playlistId], references: [id])
  playlistId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  @@id(name: "videoId", [playlistId, id])
}

model UserVideoSuggestion {
  id        String   @id
  url       String   @unique
  urlType   String
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String
  addedBy   User     @relation(fields: [userId], references: [id])
  userId    String
  status    STATUS   @default(PENDING)
  createdAt DateTime @default(now())
}

model BookmarkedPlaylist {
  id         String   @id
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  createdAt  DateTime @default(now())
}

enum STATUS {
  APPROVED
  REJECTED
  PENDING
}
